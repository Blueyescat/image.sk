import:
	java.awt.BasicStroke
	java.awt.Color
	java.awt.RenderingHints
	java.awt.image.BufferedImage
	
	ch.njol.skript.lang.Variable

effect draw [a[n]] circle [(1Â¦outline [with width %-number%])] with (radius|size) %number%[[( and|,)] [with] %-object%][[( and|,)] with [rotation] %-number% degree[s] [angle] using origin location %-number%,[ ]%-number%] on [(image|img)] %object% [at [[center] location] %-number%,[ ]%-number%] [[and] (store|save) ([[the] result]|it) (in|to) [variable] %-object%]:
	parse:
		if expression-10 is set:
			if expression-10 isn't instance of Variable:
				imagesk parse error "'%expression-10%' is not a variable."
				stop
		continue
	trigger:
		if expression-7 isn't instance of BufferedImage:
			stop
		delay the current effect
		if expression-8 is set:
			set {_x} to (expression-8) - 1
		else:
			set {_x} to 0
		if expression-9 is set:
			set {_y} to (expression-9) - 1
		else:
			set {_y} to 0
		if raw expression-10 is set:
			set {_image} to imagesk_copiedImage(expression-7)
		else:
			set {_image} to expression-7
		set {_g} to {_image}.createGraphics()
		if imagesk_colorFrom(expression-3) is instance of Color:
			{_g}.setColor(imagesk_colorFrom(expression-3))
		{_g}.setRenderingHint(RenderingHints.KEY_ANTIALIASING!, RenderingHints.VALUE_ANTIALIAS_ON!)
		if expression-4, expression-5 and expression-6 are set:
			{_g}.rotate(imagesk_toRadians(expression-4), (expression-5) - 1, (expression-6) - 1)
		if parse mark is 1:
			if expression-1 is set:
				set {_outlineWidth} to expression-1
			else:
				set {_outlineWidth} to 1
			{_g}.setStroke(new BasicStroke({_outlineWidth}, BasicStroke.CAP_ROUND! and 2))
			{_g}.drawOval(({_x} - expression-2), ({_y} - expression-2), (expression-2 * 2), (expression-2 * 2))
		else:
			{_g}.fillOval(({_x} - expression-2), ({_y} - expression-2), (expression-2 * 2), (expression-2 * 2))
		{_g}.dispose()
		if raw expression-10 is set:
			imagesk set variable raw expression-10 to {_image} in event
		continue