options:
	# If changing this is really important for you, you need to change it in all imagesk files.
	variable: imagesk # {imagesk::xxx}

import:
	java.awt.Color
	java.awt.image.BufferedImage
	
	ch.njol.skript.lang.Variable

effect:
	patterns:
		create [a[n]] [new] image with (width %-number%[( and|,)] [with] height %-number%|1¦height %-number%[( and|,)] [with] width %-number%)[[( and|,)] [with] [b[ack]g[round]] [(paint|gradient)] %-object%] [[and] (store|save) ([[the] result]|it) (in|to) [variable] %-object%]
		create [a[n]] [new] image with (width %-number%[( and|,)] [with] height %-number%|1¦height %-number%[( and|,)] [with] width %-number%) [[and] (store|save) ([[the] result]|it) (in|to) [variable] %-object%]
	parse:
		if matched pattern is 29:
			set {_varExpr} to expression-6
		else:
			set {_varExpr} to expression-5
		if {_varExpr} is set:
			if {_varExpr} isn't instance of Variable:
				imagesk parse error "'%{_varExpr}%' is not a variable."
				stop				
		continue
	trigger:
		delay the current effect
		if parse mark is 0:
			set {_width} to rounded expression-1
			set {_height} to rounded expression-2
		else if parse mark is 1:
			set {_height} to rounded expression-3
			set {_width} to rounded expression-4
		if {_width} is smaller than 1:
			set {_width} to 1
		if {_height} is smaller than 1:
			set {_height} to 1
		set {_image} to new BufferedImage({_width}, {_height}, BufferedImage.TYPE_INT_ARGB!)
		if matched pattern is 1:
			if imagesk_paintFrom(expression-5) is set:
				set {_g} to {_image}.createGraphics()
				{_g}.setPaint(imagesk_paintFrom(expression-5))
				{_g}.fillRect(0, 0, {_width}, {_height})
				{_g}.dispose()
			set {_varExpr} to raw expression-6
		else:
			set {_varExpr} to raw expression-5
		if {_varExpr} is set:
			imagesk set variable {_varExpr} to {_image} in event
		else:
			set {{@variable}::lastImage} to {_image}
		continue