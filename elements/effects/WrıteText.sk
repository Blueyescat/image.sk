options:
	# If changing this is really important for you, you need to change it in all imagesk files.
	variable: imagesk # {imagesk::xxx}

import:
	java.awt.Color
	java.awt.Font
	java.awt.BasicStroke
	java.awt.RenderingHints
	java.awt.font.TextAttribute
	java.awt.image.BufferedImage
	java.text.AttributedString
	
	ch.njol.skript.lang.Variable

effect (write|draw) [[(image|img)] (text|string) [(with (id|name)|named)]] %string% (on|to) [(image|img)] %object% [at [location] %-number%,[ ]%-number%] [with [rotation] %-number% degree[s] [angle] [using origin location %-number%,[ ]%-number%]] [[and] (store|save) ([[the] result]|it) (in|to) [variable] %-object%]:
	parse:
		if expression-8 is set:
			if expression-8 isn't instance of Variable:
				imagesk parse error "'%expression-8%' is not a variable."
				stop
		continue
	trigger:
		set {_name} to expression-1
		if expression-2 isn't instance of BufferedImage:
			stop
		if {{@variable}::texts::%{_name}%} is not set:
			stop
		delay the current effect
		if raw expression-8 is set:
			set {_image} to imagesk_copiedImage(expression-2)
		else:
			set {_image} to expression-2
		set {_g} to {_image}.createGraphics()
		set {_font} to {{@variable}::texts::%{_name}%::font}
		set {_size} to {{@variable}::texts::%{_name}%::size}
		if {_size} is smaller than 1:
			set {_size} to 1
		set {_text} to {{@variable}::texts::%{_name}%::text}
		set {_style} to 0
		if {{@variable}::texts::%{_name}%::bold} is set:
			add Font.BOLD! to {_style}
		if {{@variable}::texts::%{_name}%::italic} is set:
			add Font.ITALIC! to {_style}
		set {_font} to new Font({_font}, {_style} and {_size})
		{_g}.setFont({_font})
		if expression-3 is set:
			set {_x} to expression-3
			set {_x} to {_x} - 1
		else:
			set {_x} to 0
		if expression-4 is set:
			set {_y} to expression-4
			add {_g}.getFontMetrics({_font}).getAscent() - 1 to {_y}
		else:
			set {_y} to {_g}.getFontMetrics({_font}).getAscent() - 1
		{_g}.setRenderingHint(RenderingHints.KEY_ANTIALIASING!, RenderingHints.VALUE_ANTIALIAS_ON!)
		if expression-5 is set:
			if expression-6 and expression-7 are set:
				{_g}.rotate(imagesk_toRadians(expression-5), (expression-6) - 1, (expression-7) - 1)
			else:
				{_g}.rotate(imagesk_toRadians(expression-5), {_x}, {_y})
		if {{@variable}::texts::%{_name}%::outline}, {{@variable}::texts::%{_name}%::onlyOutline}, {{@variable}::texts::%{_name}%::outlineColor} or {{@variable}::texts::%{_name}%::outlineWidth} is set:
			loop ...{_text}.split("\n|\\n"):
				set {_w} to loop-value
				if {{@variable}::texts::%{_name}%::underline}, {{@variable}::texts::%{_name}%::strikethrough} or {{@variable}::texts::%{_name}%::background} is set:
					imagesk warning "Using underline, strikethrough and background color with outline in the same time isn't supported currently. These properties won't work."
				set {_frc} to {_g}.getFontRenderContext()
				set {_gv} to {_font}.createGlyphVector({_frc}, {_w})
				if {{@variable}::texts::%{_name}%::outlineWidth} is set:
					{_g}.setStroke(new BasicStroke({{@variable}::texts::%{_name}%::outlineWidth}, BasicStroke.CAP_ROUND!, 1))
				if {{@variable}::texts::%{_name}%::onlyOutline} is not set:
					if {{@variable}::texts::%{_name}%::foreground} is set:
						{_g}.setColor({{@variable}::texts::%{_name}%::foreground})
					{_g}.fill({_gv}.getOutline({_x}, {_y}))
				if {{@variable}::texts::%{_name}%::outlineColor} is set:
					{_g}.setColor({{@variable}::texts::%{_name}%::outlineColor})
				else:
					{_g}.setColor(Color.BLACK!)
				{_g}.draw({_gv}.getOutline({_x}, {_y}))
				add {_g}.getFontMetrics({_font}).getHeight() to {_y}
		else:
			loop ...{_text}.split("\n|\\n"):
				set {_w} to loop-value
				if {{@variable}::texts::%{_name}%::underline}, {{@variable}::texts::%{_name}%::strikethrough}, {{@variable}::texts::%{_name}%::foreground} or {{@variable}::texts::%{_name}%::background} is set:
					set {_aString} to new AttributedString({_w})
					if {{@variable}::texts::%{_name}%::underline} is set:
						{_aString}.addAttribute(TextAttribute.UNDERLINE!, TextAttribute.UNDERLINE_ON!)
					if {{@variable}::texts::%{_name}%::strikethrough} is set:
						{_aString}.addAttribute(TextAttribute.STRIKETHROUGH!, TextAttribute.STRIKETHROUGH_ON!)
					if {{@variable}::texts::%{_name}%::foreground} is set:
						{_aString}.addAttribute(TextAttribute.FOREGROUND!, {{@variable}::texts::%{_name}%::foreground})
					if {{@variable}::texts::%{_name}%::background} is set:
						{_aString}.addAttribute(TextAttribute.BACKGROUND!, {{@variable}::texts::%{_name}%::background})
					{_aString}.addAttribute(TextAttribute.FONT!, {_font})
					set {_w} to {_aString}.getIterator()
				{_g}.drawString({_w}, {_x}, {_y})
				add {_g}.getFontMetrics({_font}).getHeight() - 2 to {_y}
		{_g}.dispose()
		if raw expression-8 is set:
			imagesk set variable raw expression-8 to {_image} in event
		continue