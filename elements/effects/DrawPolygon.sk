import:
	java.awt.BasicStroke
	java.awt.Color
	java.awt.Polygon
	java.awt.RenderingHints
	java.awt.image.BufferedImage
	
	ch.njol.skript.lang.LiteralList
	ch.njol.skript.lang.Variable
	ch.njol.skript.lang.util.SimpleLiteral

effect draw [a] polygon [(1¦outline [(2¦with ((flat|square) (cap|(edge|corner)[s])))] [with width %-number%])][[( and|,)] with %-object%][[( and|,)] with [rotation] %-number% degree[s] [angle] [using origin location %-number%,[ ]%-number%]] on [(image|img)] %object% ((between|at)|using) [(corner|vertice|vertex|point)] locations %numbers% [[and] (store|save) ([[the] result]|it) (in|to) [variable] %-object%]:
	parse:
		if expression-8 is set:
			if expression-8 isn't instance of Variable:
				imagesk parse error "'%expression-8%' is not a variable."
				stop
		if expression-7 is instance of SimpleLiteral or LiteralList:
			set {_list::*} to ...(expression-7).getArray()
			set {_vertices} to rounded down (size of {_list::*}) / 2
			if {_vertices} is smaller than 3:
				imagesk parse error "A polygon must have 3 or more vertices! But entered only %{_vertices}% vertice locations."
				stop
		continue
	trigger:
		if expression-6 isn't instance of BufferedImage:
			stop
		if (size of expressions-7) / 2 is smaller than 3:
			imagesk error "A polygon must have 3 or more vertices! But entered %rounded down (size of expressions-7) / 2% vertice locations."
			stop
		delay the current effect
		if raw expression-8 is set:
			set {_image} to imagesk_copiedImage(expression-6)
		else:
			set {_image} to expression-6
		set {_g} to {_image}.createGraphics()
		if imagesk_colorFrom(expression-2) is instance of Color:
			{_g}.setColor(imagesk_colorFrom(expression-2))
		{_g}.setRenderingHint(RenderingHints.KEY_ANTIALIASING!, RenderingHints.VALUE_ANTIALIAS_ON!)
		if expression-3 is set:
			if expression-4 and expression-5 are set:
				{_g}.rotate(imagesk_toRadians(expression-3), (expression-4) - 1, (expression-5) - 1)
			else:
				{_g}.rotate(imagesk_toRadians(expression-3), {_x}, {_y})
		set {_polygon} to new Polygon()
		loop expressions-7:
			add 1 to {_coord}
			set {_c} to loop-value
			add {_c} - 1 to {_coords::*}
			if mod({_coord}, 2) is 0:
				{_polygon}.addPoint({_coords::*})
				delete {_coords::*}
		if parse mark is 1 or 3:
			if expression-1 is set:
				set {_outlineWidth} to expression-1
			else:
				set {_outlineWidth} to 1
			if parse mark is 1:
				{_g}.setStroke(new BasicStroke({_outlineWidth}, BasicStroke.CAP_ROUND!, 1))
			else:
				{_g}.setStroke(new BasicStroke({_outlineWidth}))
			{_g}.drawPolygon({_polygon})
		else:
			{_g}.fillPolygon({_polygon})
		{_g}.dispose()
		if raw expression-8 is set:
			imagesk set variable raw expression-8 to {_image} in event
		continue

effect draw [a] polygon [(1¦outline [(2¦with (flat|square) (cap|(edge|corner)[s]))] [with width %-number%])][[( and|,)] with %-object%] (with|using) (corners|vertices|vertexes|points) %number% with radius %number%[[( and|,)] [with] angle %-number% degree[s]][[( and|,)] with [rotation] %-number% degree[s] [angle] [using origin location %-number%,[ ]%-number%]] on [(image|img)] %object% [at [[center] location] %-number%,[ ]%-number%] [[and] (store|save) ([[the] result]|it) (in|to) [variable] %-object%]:
	parse:
		if expression-12 is set:
			if expression-12 isn't instance of Variable:
				imagesk parse error "'%expression-12%' is not a variable."
				stop
		continue
	trigger:
		if expression-9 isn't instance of BufferedImage:
			stop
		delay the current effect
		if raw expression-12 is set:
			set {_image} to imagesk_copiedImage(expression-9)
		else:
			set {_image} to expression-9
		set {_g} to {_image}.createGraphics()
		if imagesk_colorFrom(expression-2) is instance of Color:
			{_g}.setColor(imagesk_colorFrom(expression-2))
		{_g}.setRenderingHint(RenderingHints.KEY_ANTIALIASING!, RenderingHints.VALUE_ANTIALIAS_ON!)
		if expression-6 is set:
			if expression-7 and expression-8 are set:
				{_g}.rotate(imagesk_toRadians(expression-6), (expression-7) - 1, (expression-8) - 1)
			else:
				{_g}.rotate(imagesk_toRadians(expression-6), {_x}, {_y})
		if expression-3 is smaller than 3:
			imagesk error "A polygon must have 3 or more vertices! But entered %expression-3% vertices."
			continue
		if expression-5 is set:
			set {_angle} to expression-5
		else:
			set {_angle} to 180
		if expression-10 is set:
			set {_x} to (expression-10) - 1
		else:
			set {_x} to 0
		if expression-11 is set:
			set {_y} to (expression-11) - 1
		else:
			set {_y} to 0
		# Algorithm by bi0qaw (https://github.com/bi0qaw)
		set {_angleChange} to 360 / expression-3
		set {_polygon} to new Polygon()
		loop expression-3 times:
			{_polygon}.addPoint(({_x} + expression-4 * sin({_angle})), ({_y} + expression-4 * cos({_angle})))
			add {_angleChange} to {_angle}
		if parse mark is 1 or 3:
			if expression-1 is set:
				set {_outlineWidth} to expression-1
			else:
				set {_outlineWidth} to 1
			if parse mark is 1:
				{_g}.setStroke(new BasicStroke({_outlineWidth}, BasicStroke.CAP_ROUND!, 1))
			else:
				{_g}.setStroke(new BasicStroke({_outlineWidth}))
			{_g}.drawPolygon({_polygon})
		else:
			{_g}.fillPolygon({_polygon})
		{_g}.dispose()
		if raw expression-12 is set:
			imagesk set variable raw expression-12 to {_image} in event
		continue