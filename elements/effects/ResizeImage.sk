options:
	# If changing this is really important for you, you need to change it in all imagesk files.
	variable: imagesk # {imagesk::xxx}
	lastImageExpressionSyntax: "[the] [last[ly]] [(created|generated|received|taken)] (image|img)"

import:
	java.awt.Image
	java.awt.image.BufferedImage
	
	ch.njol.skript.lang.Variable

effect:
	patterns:
		resize [(image|img)] %object% to [sizes] (width %-number%[( and|,)] height %-number%|1¦height %-number%[( and|,)] width %-number%) [(with|using) algorithm %-number%] [[and] (store|save) ([[the] result]|it) (in|to) [variable] %-object%]
		scale [(image|img)] %object% by (width %-number% [percent][( and|,)] height %-number% [percent]|1¦height %-number% [percent][( and|,)] width %-number% [percent]) [(with|using) algorithm %-number%] [[and] (store|save) ([[the] result]|it) (in|to) [variable] %-object%]
		scale [(image|img)] %object% by %-number% [percent] [(with|using) algorithm %-number%] [[and] (store|save) ([[the] result]|it) (in|to) [variable] %-object%]
	parse:
		if matched pattern is 3:
			set {_variableExpr} to expression-4
		else:
			set {_variableExpr} to expression-7
		if {_variableExpr} is not set:
			if expression-1 isn't instance of Variable:
				if "%expression-1%" is not {@lastImageExpressionSyntax}:
					imagesk parse error "The image to be resized must be in a variable or the last image expression, or a variable to save the result image must be specified."
					stop
		else if {_variableExpr} isn't instance of Variable:
			imagesk parse error "'%{_variableExpr}%' is not a variable."
			stop
		continue
	trigger:
		if expression-1 isn't instance of BufferedImage:
			stop
		if matched pattern is 3:
			set {_variableExpr} to raw expression-4
		else:
			set {_variableExpr} to raw expression-7
		if {_variableExpr} is set:
			set {_image} to imagesk_copiedImage(expression-1)
		else:
			set {_image} to expression-1
		if matched pattern is 1 or 2:
			if parse mark is 0:
				if expression-2 or expression-3 is not set:
					stop
				set {_width} to rounded expression-2
				set {_height} to rounded expression-3
			else if parse mark is 1:
				if expression-4 or expression-5 is not set:
					stop
				set {_height} to rounded expression-4
				set {_width} to rounded expression-5
			if matched pattern is 1:
				set {_algorithm} to expression-6
			else if matched pattern is 2:
				set {_width} to ({_image}.getWidth() / 100) * {_width}
				set {_height} to ({_image}.getHeight() / 100) * {_height}
		else:
			set {_algorithm} to expression-3
			set {_width} to ({_image}.getWidth() / 100) * expression-2
			set {_height} to ({_image}.getHeight() / 100) * expression-2
		if {_width} is smaller than 1:
			set {_width} to 1
		if {_height} is smaller than 1:
			set {_height} to 1
		delay the current effect
		if {_algorithm} is 1:
			set {_algorithm} to Image.SCALE_AREA_AVERAGING!
		else if {_algorithm} is 2:
			set {_algorithm} to Image.SCALE_DEFAULT!
		else if {_algorithm} is 3:
			set {_algorithm} to Image.SCALE_FAST!
		else if {_algorithm} is 4:
			set {_algorithm} to Image.SCALE_REPLICATE!
		else if {_algorithm} is 5:
			set {_algorithm} to Image.SCALE_SMOOTH!
		else:
			set {_algorithm} to Image.SCALE_DEFAULT!
		set {_temp} to {_image}.getScaledInstance({_width}, {_height}, {_algorithm})
		set {_resized} to new BufferedImage({_width}, {_height}, BufferedImage.TYPE_INT_ARGB!)
		set {_g} to {_resized}.createGraphics()
		{_g}.drawImage({_temp}, 0, 0, null)
		{_g}.dispose()
		if {_variableExpr} is not set:
			if "%raw expression-1%" is {@lastImageExpressionSyntax}:
				set {{@variable}::lastImage} to {_resized}
			else:
				imagesk set variable raw expression-1 to {_resized} in event
		else:
			imagesk set variable {_variableExpr} to {_resized} in event
		continue