# ##############################
# Main file of imagesk (v2.0.0-beta)
#
# https://github.com/Blueyescat/imagesk
#
# Please don't change this file, write your script in another sk file.
# ##############################

options:
	# If changing this is really important for you, you need to change it in all imagesk files.
	variable: imagesk # {imagesk::xxx}

import:
	java.awt.Color
	java.awt.image.BufferedImage
	java.lang.Math
	java.util.Base64
	
	org.bukkit.Bukkit
	
	ch.njol.skript.Skript
	ch.njol.skript.util.Color as SkriptColor
	ch.njol.skript.variables.Variables

on load:
	set {{@variable}::Logger} to Bukkit.getServer().getLogger()
	set {{@variable}::Decoder} to Base64.getDecoder()
	set {{@variable}::Encoder} to Base64.getEncoder()
	
	# Workaround for a skript-mirror limitation
	delete {{@variable}::useFloatColorMethod}
	set {_color} to try new Color(255, 255, 255)
	if "%last java error%" contains "Color parameter outside of expected range":
		set {{@variable}::useFloatColorMethod} to true

on skript unload:
	loop {{@variable}::*}:
		if loop-index is not "lastImage":
			delete {{@variable}::%loop-index%} and {{@variable}::%loop-index%::*}

expression [the] [last[ly]] [(created|generated|received|taken)] (image|img):
	get:
		return {{@variable}::lastImage}
	delete:
		delete {{@variable}::lastImage}


# You shouldn't use the syntaxes below in your scripts

effect imagesk [(1Â¦parse)] error %string%:
	trigger:
		if parse mark is 1:
			Skript.error(expression-1)
		else:
			{{@variable}::Logger}.severe("[imagesk] %expression-1%")

effect imagesk warning %string%:
	trigger:
		{{@variable}::Logger}.warning("[imagesk] %expression-1%")

effect imagesk set variable %object% to %object% in %event%:
	trigger:
		set {_variable} to expression-1
		set {_name} to {_variable}.getName().toString(expression-3)
		Variables.setVariable({_name}, expression-2, expression-3, {_variable}.isLocal())

function imagesk_colorFrom(color: object) :: object:
	if {_color} is instance of SkriptColor:
		return new Color({_color}.getBukkitColor().asRGB())
	return {_color}

function imagesk_toRadians(degrees: number) :: number:
	return Math.toRadians({_degrees})

function imagesk_pixelColor(image: object, x: number, y: number) :: object:
	set {_rgb} to {_image}.getRGB({_x} and {_y})
	return new Color({_rgb})

function imagesk_setPixelColor(image: object, x: number, y: number, rgb: number):
	{_image}.setRGB({_x}, {_y} and {_rgb})

function imagesk_copiedImage(image: object) :: object:
	return new BufferedImage(({_image}.getColorModel()), ({_image}.copyData(null)), ({_image}.isAlphaPremultiplied()) and null)

# You shouldn't use the syntaxes above in your scripts