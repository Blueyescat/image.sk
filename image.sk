import:
	ch.njol.skript.lang.Variable
	ch.njol.skript.variables.Variables
	ch.njol.skript.util.Color as SkriptColor
	java.io.File
	java.net.URL
	java.awt.Image
	java.awt.image.BufferedImage
	java.awt.AlphaComposite
	java.awt.Color
	javax.imageio.ImageIO

expression [(image|img)] colo[u]r (0¦%-color%|1¦[hex] %-string%|2¦[rgb] [\(]%-number%, %-number%, %-number%[\)])[[,] [with] ((opacity|transparency) %-number% [percent]|%-number% [percent] (opacity|transparency)))]:
	get:
		if parse mark is 0 or 1:
			if parse mark is 0:
				set {_color} to expression-1.getBukkitColor()
			else:
				set {_hex} to expression-2
				replace all "##" with "" in {_hex}
				set {_color} to Color.decode("##%{_hex}%")
			set {_r} to {_color}.getRed()
			set {_g} to {_color}.getGreen()
			set {_b} to {_color}.getBlue()
		else if parse mark is 2:
			set {_r} to expression-3
			set {_g} to expression-4
			set {_b} to expression-5
		loop "r", "g" and "b":
			if {_%loop-value%} is greater than 255:
				set {_%loop-value%} to 255
			else if {_%loop-value%} is smaller than 0:
				set {_%loop-value%} to 0
		if expression-6 is set:
			set {_opacity} to expression-6
		else if expression-7 is set:
			set {_opacity} to expression-7
		if {_opacity} is set:
			set {_opacity} to (255 / 100) * {_opacity}
			if {_opacity} is greater than 255:
				set {_opacity} to 255
			else if {_opacity} is smaller than 0:
				set {_opacity} to 0
			set {_color} to new Color({_r}, {_g}, {_b} and {_opacity})
		else:
			set {_color} to new Color({_r}, {_g} and {_b})
		return {_color}

expression %color% with ((opacity|transparency) %-number% [percent]|%-number% [percent] (opacity|transparency)):
	get:
		return color expression-1 with opacity expression-2

function imgskColor(color: object) :: object:
	if {_color} is instance of SkriptColor:
		return color {_color}
	return {_color}

function imgskSetVariable(variable: object, object: object, event: event):
	set {_variable} to "%{_variable}%"
	if first character of {_variable} is "{":
		if last character of {_variable} is "}":
			set {_variable} to subtext of {_variable} from character 2 to (length of {_variable}) - 1
	if first character of {_variable} is "_":
		Variables.setVariable((subtext of {_variable} from character 2 to length of {_variable}), {_object}, {_event} and true);
	else:
		set {%{_variable}%} to {_object}

function imgskCopyImage(image: object) :: object:
	return new BufferedImage(({_image}.getColorModel()), ({_image}.copyData(null)), ({_image}.isAlphaPremultiplied()) and null)

effect create [a[n]] [new] [(10¦transparent)] image with (0¦width %number%[( and|,)] [with] height %number%|1¦height %number%[( and|,)] [with] width %number%)[[( and|,)] [with] b[ack]g[round] %-object%] [and] (store|save) [[the] result] (in|to) [variable] %-object%:
	trigger:
		delay the current effect
		if (raw expression-6) isn't instance of Variable:
			if expression-6 is set:
				send "[image.sk] '%raw expression-6%' is not a variable." to console
			continue	
		if parse mark is 0:
			set {_width} to rounded expression-1
			set {_height} to rounded expression-2
		else if parse mark is 1:
			set {_height} to rounded expression-3
			set {_width} to rounded expression-4
		loop "width" and "height":
			if {_%loop-value%} is smaller than 1:
				set {_%loop-value%} to 1
		set {_image} to new BufferedImage({_width}, {_height} and 2)
		if imgskColor(expression-5) is instance of Color:
			set {_g} to {_image}.createGraphics()
			{_g}.setColor(imgskColor(expression-5));
			{_g}.fillRect(0, 0, {_width} and {_height});
			{_g}.dispose();
		imgskSetVariable((raw expression-6), {_image}, (event))
		continue

effect get [the] (image|img) (of|from) (0¦url %-string%|1¦file %-string%|2¦base[ ]64 %-string%) [and] (store|save) [[the] result] (in|to) [variable] %-object%:
	trigger:
		delay the current effect
		if (raw expression-4) isn't instance of Variable:
			if expression-4 is set:
				send "[image.sk] '%raw expression-4%' is not a variable." to console
			continue	
		if parse mark is 0:
			if expression-1 is set:
				set {_image} to ImageIO.read(new URL(expression-1))
				if {_image}.getType() is not 2:
					set {_newImage} to new BufferedImage(({_image}.getWidth()), ({_image}.getHeight()) and 2)
					set {_g} to {_newImage}.createGraphics()
					{_g}.drawImage({_image}, 0, 0, ({_image}.getWidth()), ({_image}.getHeight()) and null);
					{_g}.dispose();
					imgskSetVariable((raw expression-4), {_newImage}, (event))
				else:
					imgskSetVariable((raw expression-4), {_image}, (event))
		else if parse mark is 1:
			if expression-2 is set:
				set {_path} to expression-2
				replace all "/" and "\" with File.separator! in {_path}
				set {_file} to new File({_path})
				if {_file} is set:
					set {_image} to ImageIO.read({_file})
					if {_image}.getType() is not 2:
						set {_newImage} to new BufferedImage(({_image}.getWidth()), ({_image}.getHeight()) and 2)
						set {_g} to {_newImage}.createGraphics()
						{_g}.drawImage({_image}, 0, 0, ({_image}.getWidth()), ({_image}.getHeight()) and null);
						{_g}.dispose();
						imgskSetVariable((raw expression-4), {_newImage}, (event))
					else:
						imgskSetVariable((raw expression-4), {_image}, (event))
		else if parse mark is 2:
			if expression-3 is set:
				#TODO
		continue

effect resize [(image|img)] %object% to [sizes] (0¦width %number%[( and|,)] height %number%|1¦height %number%[( and|,)] width %number%) [(with|using) algorithm %-number%] [[and] (store|save) [[the] result] (in|to) [variable] %-object%]:
	trigger:
		delay the current effect
		if raw expression-7 is not set:
			if (raw expression-1) isn't instance of Variable:
				if expression-1 is set:
					send "[image.sk] The image to be resized must be in a variable!" to console
				continue
		else:
			if (raw expression-7) isn't instance of Variable:
				if expression-7 is set:
					send "[image.sk] '%raw expression-7%' is not a variable." to console
				continue
		if expression-1 isn't instance of BufferedImage:
			continue
		if parse mark is 0:
			set {_width} to rounded expression-2
			set {_height} to rounded expression-3
		else if parse mark is 1:
			set {_height} to rounded expression-4
			set {_width} to rounded expression-5
		loop "width" and "height":
			if {_%loop-value%} is smaller than 1:
				set {_%loop-value%} to 1
		if expression-6 is 1:
			set {_algorithm} to Image.SCALE_AREA_AVERAGING!
		else if expression-6 is 2:
			set {_algorithm} to Image.SCALE_DEFAULT!
		else if expression-6 is 3:
			set {_algorithm} to Image.SCALE_FAST!
		else if expression-6 is 4:
			set {_algorithm} to Image.SCALE_REPLICATE!
		else if expression-6 is 5:
			set {_algorithm} to Image.SCALE_SMOOTH!
		else:
			set {_algorithm} to Image.SCALE_DEFAULT!
		set {_temp} to expression-1.getScaledInstance({_width}, {_height} and {_algorithm})
		set {_resized} to new BufferedImage({_width}, {_height}, and 2)
		set {_g} to {_resized}.createGraphics()
		{_g}.drawImage({_temp}, 0, 0 and null);
		{_g}.dispose();
		if raw expression-7 is not set:
			imgskSetVariable((raw expression-1), {_resized}, (event))
		else:
			imgskSetVariable((raw expression-7), {_resized}, (event))
		continue

object property (0¦width|1¦height):
	get:
		if expression-1 isn't instance of BufferedImage:
			return
		if parse mark is 0:
			return expression-1.getWidth()
		else if parse mark is 1:
			return expression-1.getHeight()

object property [colo[u]r of] pixel [at [location]] %number%( and|,) %number%:
	get:
		if expression-1 isn't instance of BufferedImage:
			return
		if expression-2 is set:
			if expression-3 is set:
				set {_x} to expression-2
				set {_y} to expression-3
				set {_rgb} to expression-1.getRGB(({_x} - 1) and ({_y} - 1))
				return new Color((bits 16-23 of {_rgb}), (bits 8-15 of {_rgb}) and (bits 0-7 of {_rgb}))
	set:
		if (raw expression-1) is instance of Variable:
			if (imgskColor(change value)) isn't instance of Color:
				stop
			if expression-2 is set:
				if expression-3 is set:
					set {_rgb} to (imgskColor(change value)).getRGB()
					set {_x} to expression-2
					set {_y} to expression-3
					expression-1.setRGB(({_x} - 1), ({_y} - 1) and {_rgb});
					imgskSetVariable((raw expression-1), expression-1, (event))
		else:
			send "[image.sk] The image to be edited must be in a variable! (set pixel color)" to console
	delete:
		if (raw expression-1) is instance of Variable:
			if expression-2 is set:
				if expression-3 is set:
					set {_rgb} to new Color(0, 0, 0 and 0)
					set {_rgb} to {_rgb}.getRGB()
					set {_x} to expression-2
					set {_y} to expression-3
					expression-1.setRGB(({_x} - 1), ({_y} - 1) and {_rgb});
					imgskSetVariable((raw expression-1), expression-1, (event))
		else:
			send "[image.sk] The image to be edited must be in a variable! (delete pixel color)" to console

object property (opacity|transparency):
	set:
		if (raw expression-1) is instance of Variable:
			if expression-1 is instance of BufferedImage:
				if change value is set:
					set {_opacity} to (1 / 100) * change value
					if {_opacity} is greater than 1:
						set {_opacity} to 1
					else if {_opacity} is smaller than 0:
						set {_opacity} to 0
					set {_temp} to new BufferedImage((expression-1.getWidth()), (expression-1.getHeight()) and 2)
					set {_g} to {_temp}.createGraphics()
					{_g}.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER! and {_opacity}));
					{_g}.drawImage(expression-1, 0, 0 and null);
					{_g}.dispose();
					imgskSetVariable((raw expression-1), {_temp}, (event))
		else:
			send "[image.sk] The image to be edited must be in a variable! (set opacity)" to console

effect (get|extract) part of [(image|img)] %object% (0¦from [location] %-number%( and|,) %-number% to [location] %-number%( and|,) %-number%|1¦between locations %-number%( and|,) %-number% and %-number%( and|,) %-number%) [and] (store|save) [[the] result] (in|to) [variable] %-object%:
	trigger:
		delay the current effect
		if expression-1 isn't instance of BufferedImage:
			continue
		else if (raw expression-10) isn't instance of Variable:
			if expression-10 is set:
				send "[image.sk] '%raw expression-10%' is not a variable." to console
			continue
		if parse mark is 0:
			set {_x1} to expression-2
			set {_y1} to expression-3
			set {_x2} to expression-4
			set {_y2} to expression-5
		else if parse mark is 1:
			set {_x1} to expression-6
			set {_y1} to expression-7
			set {_x2} to expression-8
			set {_y2} to expression-9
		set {_width} to difference between {_x1} and {_x2}
		set {_height} to difference between {_y1} and {_y2}
		imgskSetVariable((raw expression-10), (expression-1.getSubimage(({_x1} - 1), ({_y1} - 1), ({_width} - 1) and ({_height} - 1))), (event))
		continue

effect (draw|merge) [(image|img)] %object% (on|with) [image] %object% [at [location] %-number%( and|,) %-number%] [[and] (store|save) [[the] result] (in|to) [variable] %-object%]:
	trigger:
		delay the current effect
		if raw expression-5 is not set:
			if (raw expression-2) isn't instance of Variable:
				if expression-2 is set:
					send "[image.sk] The image to be edited must be in a variable! (merge image)" to console
				continue
		else:
			if (raw expression-5) isn't instance of Variable:
				if expression-5 is set:
					send "[image.sk] '%raw expression-5%' is not a variable." to console
				continue
		if expression-1 isn't instance of BufferedImage:
			continue
		if expression-2 isn't instance of BufferedImage:
			continue
		if expression-3 is set:
			set {_x} to expression-3
			set {_x} to {_x} - 1
		else:
			set {_x} to 0
		if expression-4 is set:
			set {_y} to expression-4
			set {_y} to {_y} - 1
		else:
			set {_y} to 0
		set {_image} to imgskCopyImage(expression-2)
		set {_g} to {_image}.createGraphics()
		{_g}.drawImage(expression-1, {_x}, {_y} and null);
		{_g}.dispose();
		if raw expression-5 is not set:
			imgskSetVariable((raw expression-2), {_image}, (event))
		else:
			imgskSetVariable((raw expression-5), {_image}, (event))
		continue

effect (save|write) [(image|img)] %object% to [file] %string%:
	trigger:
		delay the current effect
		if expression-1 is set:
			if expression-1 isn't instance of BufferedImage:
				continue
			set {_path} to expression-2
			replace all "/" and "\" with File.separator! in {_path}
			set {_file} to new File({_path})
			if {_file} is not set:
				if expression-2 is set:
					send "[image.sk] '%raw expression-2%' is not a valid file path." to console
				continue
			{_file}.mkdirs();
			ImageIO.write(expression-1, "png" and {_file})
		continue
